                                      INTRODUCTION
GIVEN:
import codecademylib3
import pandas as pd
students0 = pd.read_csv("file0.csv")
students1 = pd.read_csv("file1.csv")
print(students0)                                              RESULT:
                                                                Unnamed: 0	full_name	        gender_age	  Fractions	  Probability	  grade
                                                              0	0	          Barrett Feragh	  M14	          76%	        72%	          9th grade
                                                              1	1	          Llewellyn Keech	  M14	          83%	        87%	          12th grade
                                                              2	2	          Delilah Sowthcote	F16	          90%	        79%	          10th grade
                                                              3	3	          Terrell Geri	    M15	          80%        	86%          	11th grade
                                                              4	4	          Gram Hallewell	  M14	          67%	        78%	          10th grade

                                      DIAGNOSE THE DATA
  1. We have provided two DataFrames, df1 and df2. Inspect both of these DataFrames using the functions listed above. Start by printing the .head() of both df1 and df2.
GIVEN:
import codecademylib3_seaborn
import pandas as pd
df1 = pd.read_csv("df1.csv")
df2 = pd.read_csv("df2.csv")
//
print(df1.head())                                             RESULT:
                                                                Grocery Item	Cake Recipe	Pancake Recipe	Cookie Recipe
                                                              0	Eggs	        2	          3	              1
                                                              1	Milk	        1	          2	              1
                                                              2	Flour	        2	          1	              2
print(df1.info())                                             RESULT:
                                                              dtypes: int64(3), object(1)
                                                              memory usage: 224.0+ bytes
                                                              None
print(df1.describe())                                         RESULT:
                                                                    Cake Recipe	        Pancake Recipe	Cookie Recipe
                                                              count	3.0	                3.0	            3.0
                                                              mean	1.6666666666666667	2.0	            1.3333333333333333
                                                              std	  0.5773502691896257	1.0	            0.5773502691896257
                                                              min	  1.0	                1.0	            1.0
                                                              25%	  1.5	                1.5	            1.0
                                                              50%	  2.0	                2.0	            1.0
                                                              75%	  2.0	                2.5	            1.5
                                                              max	  2.0	                3.0	            2.0
print(df1.columns)                                            RESULT:
                                                              Index(['Grocery Item', 'Cake Recipe', 'Pancake Recipe', 'Cookie Recipe'], dtype='object')
print(df1.value_counts())                                     RESULT:
                                                              	                  0
                                                              ('Eggs', 2, 3, 1)	  1
                                                              ('Flour', 2, 1, 2)	1
                                                              ('Milk', 1, 2, 1)	  1
print(df2.head())                                             RESULT:
                                                                Grocery Item	Recipe	        Number
                                                              0	Eggs	        Cake Recipe	    2
                                                              1	Milk	        Cake Recipe	    1
                                                              2	Flour	        Cake Recipe    	2
                                                              3	Eggs	        Pancake Recipe	3
                                                              4	Milk	        Pancake Recipe	2

  2. Explore the DataFrames using the other functions listed. Which DataFrame is “clean”, and ready for analysis? Create a variable named clean and set it equal to either 1 for df1 or 
2 for df2, depending on which DataFrame is clean.
//
clean=2

                                      DEALING WITH MULTIPLE FILES
GIVEN:
import codecademylib3_seaborn
import pandas as pd
import glob
  3. We have 10 different files containing 100 students each. These files follow the naming structure: exams0.csv, exams1.csv, … up to exams9.csv. We are going to import each file using 
pandas, and combine all of the entries into one DataFrame. First, create a variable called student_files and set it equal to the glob() of all of the csv files we want to import.
//
student_files = glob.glob('exams*.csv')
  4. Create an empty list called df_list that will store all of the DataFrames we make from the files exams0.csv through exams9.csv.
//
df_list=[]
  5. Loop through the filenames in student_files, and create a DataFrame from each file. Append this DataFrame to df_list.
//
for filename in student_files:
  data = pd.read_csv(filename)
  df_list.append(data)
  6. Concatenate all of the DataFrames in df_list into one DataFrame called students.
//
students = pd.concat(df_list)
  7. Print students and the length of students. Did we get all of them?
//
print(students)
print(len(students))

                                      RESHAPING YOUR DATA
GIVEN:
import codecademylib3_seaborn
import pandas as pd
from students import students
  8. Print out the columns of students.
//
print(students.columns)                                       RESULT:
                                                              Index(['full_name', 'gender_age', 'fractions', 'probability', 'grade'], dtype='object')
  9. There is a column for the scores on the fractions exam, and a column for the scores on the probabilities exam. We want to make each row an observation, so we want to transform this 
table to look like:
full_name	exam	score	gender_age	grade
“First Student”	“Fractions”	score%	…	…
“First Student”	“Probabilities”	score%	…	…
“Second Student”	“Fractions”	score%	…	…
“Second Student”	“Probabilities”	score%	…	…
…	…	…		
Use pd.melt() to create a new table (still called students) that follows this structure.
//
students = pd.melt(frame=students, id_vars=["full_name",'gender_age','grade'], value_vars=["fractions","probability"], value_name="score", var_name="exam")
  10. Print the .head() and the .columns of students. Also, print out the .value_counts() of the column exam.
//
print(students.head())                                          RESULT:
                                                                 full_name	        gender_age	grade	        exam	      score
                                                              0	 Moses Kirckman	    M14	        11th grade	  fractions	  69%
                                                              1	 Timofei Strowan	  M18	        11th grade	  fractions	  63%
                                                              2	 Silvain Poll	      M18	        9th grade	    fractions	  69%
                                                              3	 Lezley Pinxton     M18	        11th grade  	fractions	  nan
                                                              4	 Bernadene Saunper	F17	        11th grade	  fractions  	72%
print(students.columns)                                         RESULT:
                                                                Index(['full_name', 'gender_age', 'grade', 'exam', 'score'], dtype='object')
print(students.exam.value_counts())                             RESULT:
                                                                	          exam
                                                                fractions	  1000
                                                                probability	1000

                                      DEALING WITH DUPLICATES
GIVEN:
import codecademylib3_seaborn
import pandas as pd
from students import students
print(students)                                                 RESULT:
                                                                 full_name	        gender_age	grade	        exam	      score
                                                              0	 Moses Kirckman	    M14	        11th grade	  fractions	  69%
                                                              1	 Timofei Strowan	  M18	        11th grade	  fractions	  63%
                                                              2	 Silvain Poll	      M18	        9th grade	    fractions	  69%
                                                              3	 Lezley Pinxton     M18	        11th grade  	fractions	  nan
                                                              4	 Bernadene Saunper	F17	        11th grade	  fractions  	72%
  11. It seems like in the data collection process, some rows may have been recorded twice. Use the .duplicated() function on the students DataFrame to make a Series object called 
duplicates.
//
duplicates = students.duplicated()
  12. Print out the .value_counts() of the duplicates Series to see how many rows are exact duplicates.
//
print(duplicates.value_counts())                                RESULT:
                                                                         0
                                                                False	   1976
                                                                True	   24
  13. Update the value of students to be the students table with the duplicates dropped.
//
students = students.drop_duplicates()
  14. Use the .duplicated() function again to make a Series object called duplicates after dropping the duplicates. Print out the value counts again. Are there any Trues left?
//
duplicates = students.duplicated()
print(duplicates.value_counts())                                RESULT:
                                                                         0
                                                                False	   1976

                                      SPLITTING BY INDEX
GIVEN:
import codecademylib3_seaborn
import pandas as pd
from students import students
print(students)                                                 RESULT:
                                                                 full_name	        gender_age	grade	        exam	      score
                                                              0	 Moses Kirckman	    M14	        11th grade	  fractions	  69%
                                                              1	 Timofei Strowan	  M18	        11th grade	  fractions	  63%
                                                              2	 Silvain Poll	      M18	        9th grade	    fractions	  69%
                                                              3	 Lezley Pinxton     M18	        11th grade  	fractions	  nan
                                                              4	 Bernadene Saunper	F17	        11th grade	  fractions  	72%
  15. Print out the columns of the students DataFrame.
//
print(students.columns)                                         RESULT:
                                                                Index(['full_name', 'gender_age', 'grade', 'exam', 'score'], dtype='object')
  16. The column gender_age sounds like it contains both gender and age! Print out the .head() of the column to see what kind of data it contains.
//
print(students.gender_age.head())                               RESULT:
                                                                 gender_age
                                                              0	 M14
                                                              1	 M18
                                                              2	 M18
                                                              3	 M18
                                                              4	 F17	       
  17. It looks like the first character of the values in gender_age contains the gender, while the rest of the string contains the age. Let’s separate out the gender data into a new 
column called gender.
//
students['gender'] = students.gender_age.str[0:1]
  18. Now, separate out the age data into a new column called age.
//
students['age'] = students.gender_age.str[1:]
  19. Good job! Let’s print the .head() of students to see how the DataFrame looks after our creation of new columns.
//
print(students.head())                                          RESULT:
                                                                 full_name	        gender_age	grade	        exam	      score	  gender	age
                                                              0	 Moses Kirckman	    M14	        11th grade	  fractions	  69%    	M	      14
                                                              1	 Timofei Strowan  	M18	        11th grade	  fractions	  63%	    M	      18
                                                              2	 Silvain Poll	      M18	        9th grade	    fractions	  69%	    M	      18
                                                              3	 Lezley Pinxton	    M18	        11th grade  	fractions	  nan	    M	      18
                                                              4	 Bernadene Saunper	F17	        11th grade  	fractions	  72%	    F	      17
  20. Now, we don’t need that gender_age column anymore. Let’s set the students DataFrame to be the students DataFrame with all columns except gender_age.
//
students = students[['full_name', 'grade', 'exam', 'score', 'gender', 'age']]
print(students.head())                                          RESULT:
                                                                 full_name	        grade	      exam	      score	  gender	age
                                                              0	 Moses Kirckman	    11th grade	fractions	  69%	    M	      14
                                                              1	 Timofei Strowan	  11th grade	fractions	  63%    	M	      18
                                                              2	 Silvain Poll	      9th grade	  fractions	  69%	    M	      18
                                                              3	 Lezley Pinxton	    11th grade	fractions	  nan	    M	      18
                                                              4	 Bernadene Saunper	11th grade	fractions	  72%	    F	      17

                                      SPLITTING BY CHARACTER
GIVEN:
import codecademylib3_seaborn
import pandas as pd
from students import students
print(students)                                                 RESULT:
                                                                 full_name	        grade	      exam	      score	  gender	age
                                                              0	 Moses Kirckman	    11th grade	fractions	  69%	    M	      14
                                                              1	 Timofei Strowan	  11th grade	fractions	  63%    	M	      18
                                                              2	 Silvain Poll	      9th grade	  fractions	  69%	    M	      18
                                                              3	 Lezley Pinxton	    11th grade	fractions	  nan	    M	      18
                                                              4	 Bernadene Saunper	11th grade	fractions	  72%	    F	      17
  21. The students’ names are stored in a column called full_name. We want to separate this data out into two new columns, first_name and last_name. First, let’s create a Series object 
called name_split that splits the full_name by the " " character.
//
name_split = students['full_name'].str.split(' ')
  22. Now, let’s create a column called first_name that takes the first item in name_split.
//
students['first_name'] = name_split.str.get(0)
  23. Finally, let’s create a column called last_name that takes the second item in name_split.
//
students['last_name'] = name_split.str.get(1)
  24. Print out the .head() of students to see how the DataFrame has changed.
//
print(students.head())                                          RESULT:
                                                                 full_name	        exam	      score	  gender	age	  first_name	last_name
                                                              0	 Moses Kirckman    	fractions	  69%	    M	      14	  Moses	      Kirckman
                                                              1	 Timofei Strowan	  fractions	  63%    	M	      18	  Timofei	    Strowan
                                                              2	 Silvain Poll      	fractions	  69%    	M	      18	  Silvain	    Poll
                                                              3	 Lezley Pinxton    	fractions	  nan    	M	      18	  Lezley	    Pinxton
                                                              4  Bernadene Saunper	fractions	  72%    	F	      17	  Bernadene	  Saunper
students = students[['first_name', 'last_name', 'exam', 'score', 'gender', 'age']]
print(students.head())                                          RESULT:
                                                                 first_name	last_name  	exam	      score	  gender	age
                                                              0	 Moses	    Kirckman	  fractions	  69%	    M	      14
                                                              1	 Timofei	  Strowan	    fractions	  63%	    M	      18
                                                              2	 Silvain	  Poll	      fractions	  69%	    M	      18
                                                              3	 Lezley    	Pinxton	    fractions  	nan	    M	      18
                                                              4	 Bernadene	Saunper	    fractions  	72%	    F	      17
students = students[['first_name', 'last_name', 'exam', 'score', 'gender', 'age']]
print(students.head())

                                      LOOKING AT TYPES
  25. Let’s inspect the dtypes in the students table. Print out the .dtypes attribute.
//


